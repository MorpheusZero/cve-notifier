package lib

import (
	"archive/zip"
	"fmt"
	"io"
	"net/http"
	"os"
	"path/filepath"
)

func DownloadFileFromURLAndSaveToPath(url string, saveFilePath string) error {

	fmt.Println("[CVE Notifier] Downloading File... " + url)

	out, err := os.Create(saveFilePath)
	if err != nil {
		return err
	}
	defer func(out *os.File) {
		err := out.Close()
		if err != nil {
			fmt.Println(err.Error())
		}
	}(out)

	response, err := http.Get(url)
	if err != nil {
		return err
	}
	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			fmt.Println(err.Error())
		}
	}(response.Body)

	_, err = io.Copy(out, response.Body)

	if err == nil {
		fmt.Println("[CVE Notifier] Download Success...")
	}

	return err
}

func UnzipFileToNewPath(srcFile string, destPath string) error {

	fmt.Println("[CVE Notifier] Unzipping Archive... ")

	r, err := zip.OpenReader(srcFile)
	if err != nil {
		return err
	}
	defer func(r *zip.ReadCloser) {
		err := r.Close()
		if err != nil {
			fmt.Println(err.Error())
		}
	}(r)

	err = os.MkdirAll(destPath, 0755)
	if err != nil {
		return err
	}

	err = os.MkdirAll(destPath+"/deltaCves", 0755)
	if err != nil {
		return err
	}

	for _, f := range r.File {
		rc, err := f.Open()
		if err != nil {
			return err
		}

		path := filepath.Join(destPath, f.Name)
		if f.FileInfo().IsDir() {
			err = os.MkdirAll(path, f.Mode())
			if err != nil {
				return err
			}
		} else {
			// Create the file
			outFile, err := os.Create(path)
			if err != nil {
				return err
			}

			_, err = io.Copy(outFile, rc)
			if err != nil {
				return err
			}

			err = outFile.Close()
			if err != nil {
				fmt.Println(err.Error())
			}
		}

		err = rc.Close()
		if err != nil {
			fmt.Println(err.Error())
		}
	}

	fmt.Println("[CVE Notifier] Unzip Success... ")

	return nil
}
